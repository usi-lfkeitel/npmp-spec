Lee Keitel
September 2016

        Network Performance Monitor Protocol

Abstract

    The Network Performance Monitor Protocol provides a framework for nodes to
    register with a central system, obtain jobs to run, and send results back
    to a central server.

Table of Contents

    1.      Introduction
    2.      Protocol Specification
    2.1.    Header
    2.2.    Message Types
    2.2.1.  REGISTER
    2.2.2.  DISCONNECT
    2.2.3.  START
    2.2.4.  END
    2.2.5.  DATA
    2.2.6.  INFORM
    2.2.7.  VERSION
    2.2.8.  ACK
    2.2.9.  NACK
    2.2.10. SETTINGS
    2.3.    NACK Response Codes
    2.4.    SETTINGS Options
    2.5.    DATA Types
    3.      Using the Protocol
    3.1.    Registering With a Server
    3.2.    Requesting Job Information
    3.3.    Running a Job
    3.4.    Sending Information to the Server
    4.      Heartbeat
    5.      Security Implications
    6.      Copyright

1. Introduction

    The Network Performance Monitor Protocol (NPMP) provides configuration
    information to clients such as jobs, schedules, and server information.
    The purpose to provide a concise, reliable communication mechanism between
    a server and worker clients. NPMP is built on a client-server model where
    a server acts as the sole authoritative source for the system. A client
    receives all needed information from the server and acts accordingly.
    The NPMP uses TCP as its transport protocol.

2. Protocol Specification

    NPMP datagrams have a fairly simple structure that consists of a header
    and a variable data portion depending on the message type. This
    specification describes version 0 of NPMP.

2.1 Header

    The header is 4 bytes and uses the following format:

    0                   1                   2
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |  version (1)  |   cookie (1)  | mess code (1) |
    +---------------+--------------------------------

    Version is an 8 bit unsigned int indicating the protocol version. The cookie
    is a magic string with the value 0x50 0x4d which is the ASCII string 'PM'.
    Message code is an 8 bit unsigned int indicating the type of message. The
    type will determine how the data portion should be processed.

2.2. Message Types

    Message types are used so the application knows how to process the data
    portion of the message.

2.2.1. REGISTER

    REGISTER has a message code of 1. REGISTER has a data portion as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    |                          cuid  (16)                           |
    |                                                               |
    |                                                               |
    +---------------+-----------------------------------------------+
    |  ifcount (1)  |       interface information (variable)        |
    +---------------+-----------------------------------------------+

    A single interface information section is 11 bytes and is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |   iftype (1)  |                 ifhaddr (6)                   |
    +---------------+-------------------------------+---------------+
    |                 ifhaddr (6)                   |   ifaddr (4)  |
    +-----------------------------------------------+---------------+
    |                  ifaddr (4)                   |
    +-----------------------------------------------+

    The total data portion will be of length 16 + 1 + (ifcount * 11) bytes.

    cuid - 16 bytes - A unique identifier from the client. This should be
        generated by the client and used on subsequent registers to a server.
        A different cuid should be assumed to be a different physical client.

    ifcount - 1 byte - The number of interfaces available for testing.

    iftype - 1 byte - The type of network interface. A value if 0 indicates
        an 802.3 Ethernet interface. A value of 1 indicates an 802.11 wireless
        interface.

    ifhaddr - 6 bytes - The IEEE 802 MAC-48 hardware address of the interface.

    ifaddr - 4 bytes - The IP address of the interface.

    REGISTER is used by a client to connect to the central server and notify
    the system that it's ready to perform work. The server is responsible for
    authenticating the client and return an ACK if the client is clear to
    continue communication or an NACK with a response code if the client
    is not allowed to continue communication. If the client receives an ACK
    it should proceed with its normal INFORM cycle. If it receives an NACK,
    it should close the connection, attempt to remedy the situation if possible,
    and attempt another REGISTER. The client should use an exponential back-off
    algorithm to determine when it will attempt another REGISTER. A client
    should continue to attempt registration until successful or until the client
    software is terminated.

2.2.2. DISCONNECT

    DISCONNECT has a message code of 2 and has no data portion. A client SHOULD
    send a DISCONNECT when it wishes to gracefully disconnect from its central
    server. When a server receives a DISCONNECT from a client, it MUST close
    the connection. A client is not required to send a DISCONNECT for example it
    the connection was unexpectedly closed. A server should not rely on a
    DISCONNECT as notification of a client leaving.

2.2.3. START

    START has a message code of 3 and the following data portion:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                          jobid (4)                            |
    +---------------------------------------------------------------+

    jobid - 4 bytes - The ID of the job the client wishes to start.

    The client MUST send a START message to the server before starting a job.
    The server MUST respond with either a SETTINGS message containing options
    needed by the client to perform the job or NACK if for some reason the
    server cannot accommodate the client. After a client has sent a START
    message and before the client sends and END message, the server SHOULD
    assume the client is alive. The client SHOULD NOT send an INFORM message
    while it's performing a job. The server MAY extend the normal heart beat
    timeout while a client is working to accommodate work time.

2.2.4. END

    END has a message code of 4 and the following data portion:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                          jobid (4)                            |
    +---------------------------------------------------------------+

    jobid - 4 bytes - The ID of the job the client has finished.

    The client SHOULD send an END message to the server as soon as it has
    finished a job. The server MUST respond with an ACK and SHOULD then clean up
    any resources used by the client. If the client does not send an END
    message, but instead sends any other message, the server SHOULD assume the
    client has finished its most recent job and clean up any resources as if the
    client has sent an END message.

2.2.5. DATA

    DATA has a message code of 5 and the following data portion:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                       data length (4)                         |
    +---------------------------------------------------------------+
    |    type (1)   |             data (variable)                   |
    +---------------+-----------------------------------------------+

    or when using vendor extensions:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                       data length (4)                         |
    +---------------+---------------+-------------------------------+
    |    type (1)   |  ventype (1)  |       data (variable)         |
    +---------------+---------------+-------------------------------+

    type - 1 byte - 8 bit unsigned int indicating the type of data. This is
        used by the server to determine how the data should be processed.

    DATA is used to transfer job/test data from a client to the central server.
    The data can be anything and is determined by the application. Section 2.5
    contains a list of possible data types. When the vendor type (255) is used,
    and extra 1 byte field is added before the data for another, vendor specific
    data type. The value of this field is up to the application. After the
    server receives a DATA message, it MUST respond with either an ACK if the
    data was valid or NACK if the data was invalid or some other error occured.
    If a client receives an NACK, it SHOULD attempt to fix the data if possible
    and attempt another DATA message. Otherwise, it should continue operation
    as usual.

2.2.6. INFORM

    INFORM has a message code of 6 and the following data portion:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |    len (1)    |           option codes (variable)             |
    +---------------+-----------------------------------------------+

    len - 1 byte - The number of options being requested.

    option codes - variable - Options being requested by the client.

    INFORM is used by a client to request data from a server. The client SHOULD
    specify which options it wishes to receive. The server SHOULD only return
    the options the client requests, but MAY return all applicable options. The
    MUST ignore options it didn't request. If a client sends an INFORM with a
    length of 0, the server MUST return all applicable options. The client MAY
    ignore options it doesn't need.

    INFORM is used to send job, update, and system information to the client.
    It CAN act as a heartbeat for the client.

2.2.7. VERSION

    VERSION has a message code of 7 and no data portion.

    The server MUST response with a SETTINGS message containing only the version
    option. The server MUST respond to a VERSION message even if the client is
    not registered or otherwise authorized to use the system. The message is
    used by clients to determine what protocol version to use when communicating
    with the server.

2.2.8. ACK

    ACK has a message code of 8 and no data portion.

    An ACK message can only be sent from a server to a client in response to
    some other message. An ACK message notifies the client that the server has
    received its message and processed it accordingly. The client is free to
    continue operation. If a client message as no other predefined server
    response, the server MUST send an ACK message.

2.2.9. NACK

    NACK has a message code of 9 and the following data portion:

    0 1 2 3 4 5 6 7 8
    +-+-+-+-+-+-+-+-+
    |    code (1)   |
    +---------------+

    code - 1 byte - Response code indicating reason for no acknowledgment.

    NACK is sent from the server to a client when the server is unable to
    process a request or when the client is unauthorized from accessing the
    system. Section 2.3 lists the possible response codes.

2.2.10. SETTINGS

    Settings has a message code of 10 and its data portion is made up of zero or
    more options. An option takes the following form:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |    code (1)   |            len (2)            | data ...
    +---------------+-------------------------------+---------------+

    code - 1 byte - Option code

    len - 2 byte - Length of option data as 16 bit integer.

    SETTINGS is sent from the server to a client and contains settings in the
    form of an option to configure the client. Possible information sent
    includes the server IP, iPerf server information, software version,
    protocol version, etc. Section 2.4 lists the available option codes. There
    is a vendor option to allow applications to define their own options. The
    options field is terminated by the END option.

2.3. NACK Response Codes

    Code    Description
     0      General Error
     1      Not Authorized
     2      Unsupported Version
     3      No Ports Available
     4      Invalid Data

2.4. SETTINGS Options

2.4.1. PAD

    +---+
    | 0 |
    +---+

    A PAD option may be used to align options along a word boundary. They have
    no meaning and MUST be ignored.

2.4.2. END

    +-----+
    | 255 |
    +-----+

    An END option MUST be the last option of the options field. When END is
    encountered, the application MUST stop processing options.

2.4.3. Server IP

     Code   Len         IP address of master server
    +-----+-----+-----+-----+-----+-----+-----+
    |  1  |     4     |  a1 |  a2 |  a3 |  a4 |
    +-----+-----+-----+-----+-----+-----+-----+

    IP version 4 address of the master server. Typically will be the same as the
    IP to which it was sent. Returning a different IP can be used to migrate
    clients to a new master if needed.

2.4.4. iPerf Server Address

     Code   Len         IP address of iPerf server
    +-----+-----+-----+-----+-----+-----+-----+
    |  2  |     4     |  a1 |  a2 |  a3 |  a4 |
    +-----+-----+-----+-----+-----+-----+-----+

    Used when a client is requesting to start an iPerf job.

2.4.5. iPerf Server Port

     Code   Len         iPerf Port
    +-----+-----+-----+-----+-----+
    |  3  |     2     |  n1 |  n2 |
    +-----+-----+-----+-----+-----+

    Used when a client is requesting to start an iPerf job.

2.4.6. iPerf Server Version

     Code   Len         Ver
    +-----+-----+-----+-----+
    |  4  |     1     |  n1 |
    +-----+-----+-----+-----+

    Used when a client is requesting to start an iPerf job.As of this writting,
    this option value will either be 2 or 3.

2.4.7. Deadline of Dynamic Job Resource

     Code   Len         Deadline
    +-----+-----+-----+-----+-----+-----+-----+
    |  5  |     4     |  n1 |  n2 |  n3 |  n4 |
    +-----+-----+-----+-----+-----+-----+-----+

    The time duration in seconds that the allocated job resources will expire.
    For example, if an iPerf server is used, the client will have Deadline secs
    to use the iPerf server before it's closed by the master server. Ideally,
    the client would send an END message before this timeout.

2.4.8. Protocol Version

     Code   Len         Ver
    +-----+-----+-----+-----+
    |  6  |     4     |  n1 |
    +-----+-----+-----+-----+

    The protocol version support by the master server.

2.4.9 Client Software Version

     Code   Len         Symantic Version
    +-----+-----+-----+-----+-----+-----+-----+
    |  7  |     4     |  v1 |  v2 |  v3 |  v4 |
    +-----+-----+-----+-----+-----+-----+-----+

    The version of software the client should be running according to the server.
    The version number order is major, minor, revision, and extra. Major, minor,
    and revision are typical symantic versioning numbers. Extra can be used to
    indicate version such as dev, alpha, beta, or release candidates. It's up to
    the application whether or not extra is ever used.

2.4.10 Client Software Repository

     Code   Len         URI Path
    +-----+-----+-----+-----+-----+-----+-----+---
    |  8  |     n     |  p1 |  p2 |  p3 |  p4 | ...
    +-----+-----+-----+-----+-----+-----+-----+---

    The location a client can use to download client software. The actual update
    mechanism is application specific. This could be a single tar ball located
    on an open FTP server, or it could be an http directory that contains several
    files. It doesn't really matter.

2.4.11 Job Spec

     Code   Len         Job Spec
    +-----+-----+-----+-----+-----+-----+-----+---
    |  9  |     n     |  s1 |  s2 |  s3 |  s4 | ...
    +-----+-----+-----+-----+-----+-----+-----+---

    An application specific job spec given to the client from the server. It
    doesn't matter how the data is encoded, it could be CSV, JSON, XML, etc. So
    long as both the client and server use the same spec.

2.4.12. Vendor Options

     Code   Len          Vendor Data
    +-----+-----+-----+-----+-----+-----+-----+---
    |  10 |     n     |  v1 |  v2 |  v3 |  v4 | ...
    +-----+-----+-----+-----+-----+-----+-----+---

    A vendor option allows servers to send any arbitrary data to clients. The
    use or purpose of this data is up to the application. This option may be
    used multiple times to send multiple items of data. If a client does not
    need or understand the vendor data, it MUST ignore this option.

2.5. DATA Types

    Code    Description
     0      Ping
     1      iPerf v2 CSV
     2      iPerf v3 JSON

3. Using the Protocol

    TODO.

3.1. Registering With a Server

    TODO.

3.2. Requesting Job Information

    TODO.

3.3. Running a Job

    TODO.

3.4. Sending Information to the Server

    TODO.

4. Heartbeat

    TODO.

5. Security Implications

    TODO.

6. Copyright

    TODO.
